// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "rsoi-1/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// IPersonRepo is an autogenerated mock type for the IPersonRepo type
type IPersonRepo struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: id
func (_m *IPersonRepo) DeleteById(id int32) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: person
func (_m *IPersonRepo) Insert(person *model.Person) (int32, error) {
	ret := _m.Called(person)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*model.Person) int32); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Person) error); ok {
		r1 = rf(person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields:
func (_m *IPersonRepo) SelectAll() ([]model.Person, error) {
	ret := _m.Called()

	var r0 []model.Person
	if rf, ok := ret.Get(0).(func() []model.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *IPersonRepo) SelectById(id int32) (model.Person, error) {
	ret := _m.Called(id)

	var r0 model.Person
	if rf, ok := ret.Get(0).(func(int32) model.Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Person)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: person
func (_m *IPersonRepo) UpdateById(person *model.Person) error {
	ret := _m.Called(person)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Person) error); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIPersonRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPersonRepo creates a new instance of IPersonRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPersonRepo(t mockConstructorTestingTNewIPersonRepo) *IPersonRepo {
	mock := &IPersonRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
